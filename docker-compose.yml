version: '3.4'

services:
  php:
    image: ${CONTAINER_REGISTRY_BASE}/php
    build:
      context: ./api
      target: api_platform_php
      cache_from:
        - ${CONTAINER_REGISTRY_BASE}/php
        - ${CONTAINER_REGISTRY_BASE}/nginx
        - ${CONTAINER_REGISTRY_BASE}/varnish
    depends_on:
      - db
    # Comment out these volumes in production
    volumes:
      - ./api:/srv/api:rw,cached
      # If you develop on Linux, uncomment the following line to use a bind-mounted host directory instead
      # - ./api/var:/srv/api/var:rw

  api:
    image: ${CONTAINER_REGISTRY_BASE}/nginx
    build:
      context: ./api
      target: api_platform_nginx
      cache_from:
        - ${CONTAINER_REGISTRY_BASE}/php
        - ${CONTAINER_REGISTRY_BASE}/nginx
        - ${CONTAINER_REGISTRY_BASE}/varnish
    depends_on:
      - php
    # Comment out this volume in production
    volumes:
      - ./api/public:/srv/api/public:ro
    # Port d'accés au container API (8080) via le port interne d'accés à l'API (80).
    ports:
      - "8080:80"

  cache-proxy:
    image: ${CONTAINER_REGISTRY_BASE}/varnish
    build:
      context: ./api
      target: api_platform_varnish
      cache_from:
        - ${CONTAINER_REGISTRY_BASE}/php
        - ${CONTAINER_REGISTRY_BASE}/nginx
        - ${CONTAINER_REGISTRY_BASE}/varnish
    depends_on:
      - api
    volumes:
      - ./api/docker/varnish/conf:/usr/local/etc/varnish:ro
    tmpfs:
      - /usr/local/var/varnish:exec
    # Port d'accés au container Cache-Proxy (8081) via le port interne d'accés au Cache-Proxy (80)
    ports:
      - "8081:80"
  # PostGres
  #db:
    # In production, you may want to use a managed database service
  #  image: postgres:10-alpine
  #  environment:
  #    - POSTGRES_DB=api
  #    - POSTGRES_USER=api-platform
      # You should definitely change the password in production
  #    - POSTGRES_PASSWORD=!ChangeMe!
  #  volumes:
  #    - db-data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
  #  ports:
  #    - "5432:5432"

  # MySQL
  db:
    image: mysql:8.0
    restart: always
    environment:
      - ${MYSQL_ROOT_PASSWORD}
      - ${MYSQL_ROOT_HOST}
      - ${MYSQL_USER}
      - ${MYSQL_PASSWORD}
      - ${MYSQL_DATABASE}
      - ${MYSQL_PORT}
    env_file:
      - ./.env
    volumes:
      # Default volume
      #- db-data:/var/lib/mysql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      #- ./docker/db/data:/var/lib/mysql/data:rw
      - ./shared/mysql/db/data:/var/lib/mysql:rw
      - ./api/docker/db/conf.d/default.conf:/etc/mysql/conf.d/myConf.cnf
    # Port d'accés au container MySQL (3306) via le port interne d'accès à l'instance MySQL (3306)
    # Attention le port d'accés au container MySQL devra être modifié si une instance sur la machine locale utilise le même port 3306
    ports:
      - "3306:3306"

  # Formely PHPMyAdmin
  adminer:
    image: adminer:4.6
    restart: always
    ports:
      - "8083:80"
    expose:
      - "8083"

  client:
    # Use a static website hosting service in production
    # See https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment
    image: ${CONTAINER_REGISTRY_BASE}/client
    build:
      context: ./client
      cache_from:
        - ${CONTAINER_REGISTRY_BASE}/client
    env_file:
      - ./client/.env
    volumes:
      - ./client:/usr/src/client:rw,cached
      - /usr/src/client/node_modules
    # Port d'accés local au container Client (80) via le port interne d'accés au Client React 3000
    # Attention le port d'accés local doit être modifié si une instance local utilise le même port
    ports:
      - "80:3000"

  admin:
    # Use a static website hosting service in production
    # See https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment
    image: ${CONTAINER_REGISTRY_BASE}/admin
    build:
      context: ./admin
      cache_from:
        - ${CONTAINER_REGISTRY_BASE}/admin
    volumes:
      - ./admin:/usr/src/admin:rw,cached
      - /usr/src/admin/node_modules
    ports:
      - "81:3000"

  h2-proxy:
    # Don't use this proxy in prod
    build:
      context: ./h2-proxy
    depends_on:
      - client
      - admin
      - api
      - cache-proxy
    ports:
      - "443:443"
      - "444:444"
      - "8443:8443"
      - "8444:8444"

volumes:
  db-data: {}
